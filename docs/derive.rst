Key derivation
==============

.. currentmodule:: cryptography.derive

This module provides a utility to derive cryptographically
strong keys from passwords or other keys.

.. function:: derive_key(key_material, identifier, length=32, strong=False)

    There are 2 required arguments: ``key_material`` and ``identifier``.
    ``length`` determines the output length in bytes of the derived key.

    If ``strong`` is ``True``, ``key_material`` must already be
    cryptographically strong. The ``identifier`` is a unique name
    used to describe the derived key.

    One use case is having a master key that is used to derive other
    keys for different purposes.

    .. doctest::

        >>> import os
        >>> from cryptography.derive import derive_key
        >>> master_key = os.urandom(32)
        >>> signing_key = derive_key(master_key, b'signing', strong=True)
        >>> publish_key = derive_key(master_key, b'publish', strong=True)
        >>> signing_key != publish_key
        True

    If ``strong`` is ``False`` (by default it is), ``key_material`` will be
    considered a password. The ``identifier`` must be randomly generated
    and unique to each password.

    This allows a password to be used in, for example, symmetric encryption
    schemes.

    .. doctest::

        >>> import base64
        >>> import os
        >>> from cryptography.derive import derive_key
        >>> from cryptography.fernet import Fernet
        >>> password = b"password"
        >>> salt = os.urandom(16)
        >>> key = derive_key(password, salt, length=32)
        >>> f = Fernet(base64.urlsafe_b64encode(key))
        >>> token = f.encrypt(b"Secret message!")
        >>> token
        '...'
        >>> f.decrypt(token)
        'Secret message!'

    :param bytes key_material: A password, or a cryptographically strong key
                               if ``strong`` is ``True``.
    :param bytes identifier: Randomly generated bytes, preferably no less than
                             16 bytes long, or a name for the derived key if
                             ``strong`` is ``True``.
    :param int length: The desired output length in bytes of the derived key.
    :param bool strong: Flag determining how the ``key_material`` is treated.
